# Claude Tool Call Format Documentation

When Claude needs to call a tool, it uses an XML-like tag format that looks like this:

OPENING_TAG:antml:function_calls
OPENING_TAG:antml:invoke name="TOOL_NAME"
OPENING_TAG:antml:parameter name="PARAM_NAME"PARAM_VALUE_OPENING_TAG:antml:parameter
OPENING_TAG:antml:parameter name="OTHER_PARAM"OTHER_VALUE_OPENING_TAG:antml:parameter
CLOSING_TAG:antml:invoke
CLOSING_TAG:antml:function_calls

Note: Replace OPENING_TAG with < and CLOSING_TAG with </

This format is parsed by the client and interpreted as a tool call request. 

The @gemini_proxy_v2.py script needs to detect these patterns in the text output from Gemini to identify when the model is requesting to use a tool.

## How the extract_tool_call_requests Function Works

1. It uses regex to search for patterns matching the above format
2. When detected, it extracts the tool name
3. It returns (True, tool_name) if a tool call is detected
4. The proxy then stores this information for auto-continuation

## Challenges

- The regex needs to be robust enough to handle variations in formatting
- It needs to avoid false positives
- The XML-like tags can cause issues when documented directly (as they might be interpreted as actual tool calls)

## Recommendation for @gemini_proxy_v2.py

The existing regex pattern is:
r'<function_calls>[\s\S]*?<invoke name="([^"]+)">([\s\S]*?)<\/antml:invoke>[\s\S]*?<\/antml:function_calls>'

This looks for the specific Claude format but the closing tags have 'antml:' which might not match all patterns. Consider making the regex more flexible to handle variants.

When raw text is passed through from Gemini to Cursor without transformations, these tool call formats will be preserved exactly as Gemini outputs them. 