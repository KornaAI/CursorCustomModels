# Tool Call Format Reference

This document contains examples of the proper format for tool calls that Gemini should output 
so Cursor can parse them correctly. The actual XML tags are slightly adjusted in this document
to prevent Cursor from interpreting them as actual tool calls.

## Terminal Command Example 

```
[function_calls]
[invoke name="run_terminal_cmd"]
[parameter name="command"]echo "Hello world"[/parameter]
[parameter name="is_background"]false[/parameter]
[/invoke]
[/function_calls]
```

## File Reading Example

```
[function_calls]
[invoke name="read_file"]
[parameter name="target_file"]path/to/file.txt[/parameter]
[parameter name="offset"]0[/parameter]
[parameter name="limit"]100[/parameter]
[/invoke]
[/function_calls]
```

## File Editing Example

```
[function_calls]
[invoke name="edit_file"]
[parameter name="target_file"]path/to/file.py[/parameter]
[parameter name="instructions"]Update the function to handle edge cases[/parameter]
[parameter name="code_edit"]def example_function():
    # New implementation
    return result[/parameter]
[/invoke]
[/function_calls]
```

## Codebase Search Example

```
[function_calls]
[invoke name="codebase_search"]
[parameter name="query"]how to handle authentication[/parameter]
[parameter name="target_directories"]["/src", "/lib"][/parameter]
[/invoke]
[/function_calls]
```

## Format Notes

1. In actual use, replace the square brackets `[ ]` with angle brackets `< >` in the tags
2. For the closing tags, use `</parameter>`, `</invoke>`, and `</function_calls>`
3. When using in the Gemini system prompt, explain that:
   - Each parameter should be on a single line
   - The parameter name and value should be correctly specified
   - All tags must be properly closed
   - No extra spaces or line breaks in the XML structure

## Implementation in gemini_proxy_v2.py

The proxy uses regex patterns to detect tool calls:

```python
tool_call_patterns = [
    r'<function_calls>[\s\S]*?<invoke name="([^"]+)">([\s\S]*?)<\/antml:invoke>[\s\S]*?<\/antml:function_calls>',
    r'```(json)?[\s\n]*\{\s*"action"\s*:\s*"([^"]+)"[\s\S]*?\}[\s\n]*```',
    r'I need to use the ([a-zA-Z_]+) tool'
]
```

These patterns allow the system to detect when a model is trying to use a tool and enable auto-continuation. 